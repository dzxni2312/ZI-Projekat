//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF18000.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServer", CallbackContract=typeof(WCF18000.ServiceReference1.IServerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IServer {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/OTPEncrypt")]
        void OTPEncrypt(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/OTPEncrypt")]
        System.Threading.Tasks.Task OTPEncryptAsync(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/OTPDecrypt")]
        void OTPDecrypt(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/OTPDecrypt")]
        System.Threading.Tasks.Task OTPDecryptAsync(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/FourSquareEncrypt")]
        void FourSquareEncrypt(string text);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/FourSquareEncrypt")]
        System.Threading.Tasks.Task FourSquareEncryptAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/FourSquareDecrypt")]
        void FourSquareDecrypt(string text);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/FourSquareDecrypt")]
        System.Threading.Tasks.Task FourSquareDecryptAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/OFBEncrypt")]
        void OFBEncrypt(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/OFBEncrypt")]
        System.Threading.Tasks.Task OFBEncryptAsync(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/OFBDecrypt")]
        void OFBDecrypt(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/OFBDecrypt")]
        System.Threading.Tasks.Task OFBDecryptAsync(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/SHA_1")]
        void SHA_1(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/SHA_1")]
        System.Threading.Tasks.Task SHA_1Async(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/XXTEAEncrypt")]
        void XXTEAEncrypt(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/XXTEAEncrypt")]
        System.Threading.Tasks.Task XXTEAEncryptAsync(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/XXTEADecrypt")]
        void XXTEADecrypt(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/XXTEADecrypt")]
        System.Threading.Tasks.Task XXTEADecryptAsync(byte[] data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServer/Message")]
        void Message(byte[] msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerChannel : WCF18000.ServiceReference1.IServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerClient : System.ServiceModel.DuplexClientBase<WCF18000.ServiceReference1.IServer>, WCF18000.ServiceReference1.IServer {
        
        public ServerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void OTPEncrypt(byte[] data) {
            base.Channel.OTPEncrypt(data);
        }
        
        public System.Threading.Tasks.Task OTPEncryptAsync(byte[] data) {
            return base.Channel.OTPEncryptAsync(data);
        }
        
        public void OTPDecrypt(byte[] data) {
            base.Channel.OTPDecrypt(data);
        }
        
        public System.Threading.Tasks.Task OTPDecryptAsync(byte[] data) {
            return base.Channel.OTPDecryptAsync(data);
        }
        
        public void FourSquareEncrypt(string text) {
            base.Channel.FourSquareEncrypt(text);
        }
        
        public System.Threading.Tasks.Task FourSquareEncryptAsync(string text) {
            return base.Channel.FourSquareEncryptAsync(text);
        }
        
        public void FourSquareDecrypt(string text) {
            base.Channel.FourSquareDecrypt(text);
        }
        
        public System.Threading.Tasks.Task FourSquareDecryptAsync(string text) {
            return base.Channel.FourSquareDecryptAsync(text);
        }
        
        public void OFBEncrypt(byte[] data) {
            base.Channel.OFBEncrypt(data);
        }
        
        public System.Threading.Tasks.Task OFBEncryptAsync(byte[] data) {
            return base.Channel.OFBEncryptAsync(data);
        }
        
        public void OFBDecrypt(byte[] data) {
            base.Channel.OFBDecrypt(data);
        }
        
        public System.Threading.Tasks.Task OFBDecryptAsync(byte[] data) {
            return base.Channel.OFBDecryptAsync(data);
        }
        
        public void SHA_1(byte[] data) {
            base.Channel.SHA_1(data);
        }
        
        public System.Threading.Tasks.Task SHA_1Async(byte[] data) {
            return base.Channel.SHA_1Async(data);
        }
        
        public void XXTEAEncrypt(byte[] data) {
            base.Channel.XXTEAEncrypt(data);
        }
        
        public System.Threading.Tasks.Task XXTEAEncryptAsync(byte[] data) {
            return base.Channel.XXTEAEncryptAsync(data);
        }
        
        public void XXTEADecrypt(byte[] data) {
            base.Channel.XXTEADecrypt(data);
        }
        
        public System.Threading.Tasks.Task XXTEADecryptAsync(byte[] data) {
            return base.Channel.XXTEADecryptAsync(data);
        }
    }
}
